#!/bin/bash
set -Eeuo pipefail

# =============================================================================
# LAB CLI - MAIN ENTRY POINT
# =============================================================================
# gRPC Development Environment CLI Tool
# Modular architecture with focused modules for different concerns

# Determine script directory and set up module loading
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/lib"

# Module loading function with error handling
source_module() {
    local module="$1"
    if [[ -f "$LIB_DIR/$module" ]]; then
        source "$LIB_DIR/$module" || {
            echo "Error: Failed to load module $module" >&2
            exit 1
        }
    else
        echo "Error: Module $module not found at $LIB_DIR/$module" >&2
        exit 1
    fi
}

# =============================================================================
# MODULE LOADING
# =============================================================================

# Load modules in dependency order
source_module "common.sh"    # Utilities, logging, repo detection
source_module "state.sh"     # State management, error recovery  
source_module "help.sh"      # Help system and documentation
source_module "commands.sh"  # Command parsing and handlers
source_module "setup.sh"     # Setup operations and validation
source_module "publish.sh"   # Package publishing to local registry

# =============================================================================
# CONFIGURATION AND INITIALIZATION
# =============================================================================

# Global configuration variables
KEEP_STATE_MODE=false
VERBOSE_MODE=false
NETWORK_NAME="grpc-dev-network"
VERDACCIO_URL="http://localhost:4873"

# Detect repository root and validate environment
if ! REPO_ROOT=$(find_repo_root); then
    echo "‚ùå Error: Not inside the gRPC experiment repository"
    echo "   Please run this command from within the repository directory"
    exit 1
fi

# Initialize state management
init_state_file

# Initialize error handling
setup_error_handlers

# =============================================================================
# MAIN EXECUTION
# =============================================================================

# Parse command line arguments
parse_args "$@"

# Dispatch to appropriate command handler
handle_command

# Continue with setup execution if needed
if [ "$COMMAND" = "setup" ] || [ "$COMMAND" = "resume" ]; then
    run_setup
fi
